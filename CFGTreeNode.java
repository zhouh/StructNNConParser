package nncon;



public class CFGTreeNode 
{
	public  boolean is_constituent; // constituent or token 
	public  boolean single_child; // single or double
	public  boolean head_left; // left child is head  
	public  boolean temp;	// is temporary node or not (generated by CNF)
	
    // fields for constituents
	public  String  word;
	public  String constituent;
	
	/*
	* the int is used in the begining , but in the dp decode,
	* many tree share the same nodes, so the array style node 
	* point is not enough . we used the point to indicator the left 
	* or right child  
	*/
	public  int left_child;
	public  int right_child;
    // fields for tokens and constituents
	public  int token;   //the head index
	public  int index;
	
	/**
	 * default constructor
	 * all int are -1
	 * all boolean are false
	 * all string are "None"
	 * */
	public CFGTreeNode(){
		  
	      token=-1; 
	      left_child=-1; 
	      right_child=-1; 
	      
	      is_constituent =false;
	      single_child = false;
	      head_left = false;
	      temp = false;
	      constituent="NONE";  
	      word="None";
	      index=-1;
	}
	
	/**
	 * copy constructor
	 * 
	 * @param forclone the CFGTree to be copy
	 * @author zhouh
	 * */
	public CFGTreeNode(CFGTreeNode forclone){
		  token=forclone.token; //初始 全设为-1
	      left_child=forclone.left_child; 
	      right_child=forclone.right_child;
	      
	      is_constituent = forclone.is_constituent;
	      single_child = forclone.single_child;
	      head_left = forclone.head_left;
	      temp = forclone.temp;
	      constituent=forclone.constituent;  //初始设为None
	      word=forclone.word;
	      index=forclone.index;
	}
	
	/**
	 * 
	 */
	public CFGTreeNode(String word, String tag, int index){
		
		  token=-1; 
	      left_child=-1; 
	      right_child=-1; 
	      
	      is_constituent =false;
	      single_child = false;
	      head_left = false;
	      temp = false;
	      constituent=tag;  
	      this.word=word;
	      this.index=index;
	}
	
}
